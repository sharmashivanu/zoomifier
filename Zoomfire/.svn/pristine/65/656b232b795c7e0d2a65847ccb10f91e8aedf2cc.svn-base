package com.zoomactivity;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;



import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.ContactsContract.CommonDataKinds.Email;
import android.provider.Settings.Secure;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Rect;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class MainActivity extends Activity {
	String response;
	String singUpresponse;
	Dialog loginInterfaceDialog;
    String returnResponse= null;
	String responseResult, userUserid, userFirstname, userLastname, userEmail, userLocationid, clientClientid, clientName, clientDescription;
	Button loginButton,signUpButton;
	EditText signEmail,signPassword,signUpEmail,signUpPassword,signUpverifiyPassword;
	ProgressDialog progressDialog;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		 super.onCreate(savedInstanceState);
		 setContentView(R.layout.activity_main);
	     dialogGenrater();
	     init();
	     
	     loginButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(signEmail.getText().toString().equals(""))
				{
					Toast.makeText(MainActivity.this, "Enter Email", Toast.LENGTH_LONG).show();
				}
				else if(signPassword.getText().toString().equals(""))
				{
					Toast.makeText(MainActivity.this, "Enter Password", Toast.LENGTH_LONG).show();
				}
				else
				{
					new loadList().execute();
				}
			}
		});
	    signUpButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(signUpEmail.getText().toString().equals(""))
				{
					Toast.makeText(MainActivity.this, "Enter Email", Toast.LENGTH_LONG).show();
				}
				else if(signUpPassword.getText().toString().equals(""))
				{
					Toast.makeText(MainActivity.this, "Enter Password", Toast.LENGTH_LONG).show();
				}
				else if(!signUpverifiyPassword.getText().toString().equals(signUpPassword.getText().toString()))
				{
					Toast.makeText(MainActivity.this, "Password does not Match", Toast.LENGTH_LONG).show();
				}
				else
				{
					new SignUpThread().execute();
				}	
				
			}
		}); 
	     
	}

	public class loadList extends AsyncTask<Void, Void, Void> {
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			progressDialog=new ProgressDialog(MainActivity.this);
			progressDialog.setMessage("Please Wait Downloading Your Data");
			progressDialog.show();

		}

		@Override
		protected Void doInBackground(Void... params) {
			
        	   String body="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
        			 +"<request>" 
        	   		 +"<operation opcode=\"AUTHENTICATE_READER\">"
        			 +"<params email=\""+signEmail.getText().toString()+"\" password=\""+signPassword.getText().toString()+"\"/>"
        	        +"</operation>"
        			 +"</request>";
        	   String id="78";
   			   String categoryid="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
         			 +"<request>" 
         	   		 +"<operation opcode=\"GET_ALL_CATEGORIES\">"
         			 +"<params clientid=\""+id+"\"/>"
         	        +"</operation>"
         			 +"</request>";
   			   String clintId="";
   			   String cateoryid="";
   			   String locationId="";
   			   String document="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
   	    			 +"<request>" 
   	    	   		 +"<operation opcode=\"GET_DOCUMENTS\">"
   	    			 +"<params clientid=\""+clintId+"\" categoryid=\""+categoryid+"\" locationid=\""+locationId+"\"/>"
   	    	         +"</operation>"
   	    			 +"</request>";
        	   try {
                   HttpClient httpclient = new DefaultHttpClient();
                   HttpPost post = new HttpPost("http://ve1.zoomifier.net:8080/zoomifierws/rest/interface");
                   StringEntity str = new StringEntity(body);
                   str.setContentType("application/xml; charset=utf-8");
                   str.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE,"application/xml; charset=utf-8"));
                   post.setEntity(str);
                   HttpResponse response = httpclient.execute(post);
                   HttpEntity entity = response.getEntity();
                   returnResponse = EntityUtils.toString(entity);
                 Log.i("retrun Resopnese=======", returnResponse);
                 } catch ( IOException ioe ) {
                  ioe.printStackTrace();
                 }
        	   try{
                
        	    XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
                factory.setNamespaceAware(true);
                XmlPullParser xpp = factory.newPullParser();
                 xpp.setInput( new StringReader (returnResponse));
                int eventType = xpp.getEventType();
                 while (eventType != XmlPullParser.END_DOCUMENT) {
                if(eventType == XmlPullParser.START_DOCUMENT) {
                    
                } else if(eventType == XmlPullParser.START_TAG) {
                    Log.i("Start tag ",xpp.getName());
                    if(xpp.getName().equals("response")){
                    	responseResult = xpp.getAttributeValue(0);
                    }else if(xpp.getName().equals("reader")){
                    	  userUserid=xpp.getAttributeValue(0);
                    	  userFirstname=xpp.getAttributeValue(1);
                    	  userLastname=xpp.getAttributeValue(2);
                    	  userEmail=xpp.getAttributeValue(3);
                    	  userLocationid=xpp.getAttributeValue(4);
                    	  Log.i("user Id=", userUserid);
                    }else if(xpp.getName().equals("client")){
                    	
                    }
                   
                } else if(eventType == XmlPullParser.END_TAG) {
                    
                } else if(eventType == XmlPullParser.TEXT) {
                    
                }
                eventType = xpp.next();
               }
               System.out.println("End document");
        	   }
        	   catch(Exception e)
        	   {
        		   e.printStackTrace();
        	   }
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			super.onPostExecute(result);
			
			progressDialog.dismiss();
			/*Toast.makeText(MainActivity.this, responseResult, Toast.LENGTH_LONG)
					.show();*/
			if(responseResult.equals("success"))
			{
				 Intent gridIntent=new Intent(MainActivity.this,GridActivity.class);
				 startActivity(gridIntent);
			     finish();
			     loginInterfaceDialog.dismiss();
			     
			}
			

		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}
public void dialogGenrater()
{
	    loginInterfaceDialog=new Dialog(this);
		loginInterfaceDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		loginInterfaceDialog.setContentView(R.layout.login_dialog_interface);
		loginInterfaceDialog.setCanceledOnTouchOutside(false);
		loginInterfaceDialog.getWindow().setLayout(600, 600);
	
		
		loginInterfaceDialog.show();
		loginInterfaceDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
			
			@Override
			public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
				if(keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP)
				{
	                   finish();
				}
				return false;
			}
		});
		
}
public void init()
{
	signEmail=(EditText) loginInterfaceDialog.findViewById(R.id.signin_username);
	signPassword=(EditText) loginInterfaceDialog.findViewById(R.id.signin_password);
	loginButton=(Button) loginInterfaceDialog.findViewById(R.id.signin_btn);
	signUpEmail=(EditText) loginInterfaceDialog.findViewById(R.id.signup_username);
	signUpverifiyPassword=(EditText) loginInterfaceDialog.findViewById(R.id.signup_verifypassword);
	signUpPassword=(EditText) loginInterfaceDialog.findViewById(R.id.signup_password);
	signUpButton=(Button) loginInterfaceDialog.findViewById(R.id.sign_up);
	
}
	
public class SignUpThread extends AsyncTask<Void, Void, Void> {
	@Override
	protected void onPreExecute() {
		super.onPreExecute();
		progressDialog=new ProgressDialog(MainActivity.this);
		progressDialog.setMessage("Please Wait Downloading Your Data");
		progressDialog.show();

	}

	@Override
	protected Void doInBackground(Void... params) {
		  String firstName=" ";
		  String lastName=" ";
		  String comapnyName=" ";
    	   String body="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
    			 +"<request>" 
    	   		 +"<operation opcode=\"SIGN_UP\">"
    			 +"<params email=\""+signUpEmail.getText().toString()+"\" password=\""+signUpPassword.getText().toString()+"\" firstname=\""+firstName+"\" lastname=\""+lastName+"\" companyname=\""+comapnyName+"\"/>"
    	         +"</operation>"
    			 +"</request>";
			
    	   try {
               HttpClient httpclient = new DefaultHttpClient();
               HttpPost post = new HttpPost("http://ve1.zoomifier.net:8080/zoomifierws/rest/interface");
               StringEntity str = new StringEntity(body);
               str.setContentType("application/xml; charset=utf-8");
               str.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE,"application/xml; charset=utf-8"));
               post.setEntity(str);
               HttpResponse response = httpclient.execute(post);
               HttpEntity entity = response.getEntity();
               returnResponse = EntityUtils.toString(entity);
              System.out.print("afa");
             } catch ( IOException ioe ) {
              ioe.printStackTrace();
             }
    	   try{
            
    	    XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
            factory.setNamespaceAware(true);
            XmlPullParser xpp = factory.newPullParser();
             xpp.setInput( new StringReader (returnResponse));
             String str=returnResponse;
            int eventType = xpp.getEventType();
             while (eventType != XmlPullParser.END_DOCUMENT) {
            if(eventType == XmlPullParser.START_DOCUMENT) {
                
            } else if(eventType == XmlPullParser.START_TAG) {
                Log.i("Start tag ",xpp.getName());
                if(xpp.getName().equals("response")){
                	responseResult = xpp.getAttributeValue(0);
                	System.out.print("afa");
                }else if(xpp.getName().equals("reader")){
                	  userUserid=xpp.getAttributeValue(0);
                	  userFirstname=xpp.getAttributeValue(1);
                	  userLastname=xpp.getAttributeValue(2);
                	  userEmail=xpp.getAttributeValue(3);
                	  userLocationid=xpp.getAttributeValue(4);
                }else if(xpp.getName().equals("client")){
                	
                }
               
            } else if(eventType == XmlPullParser.END_TAG) {
                
            } else if(eventType == XmlPullParser.TEXT) {
                
            }
            eventType = xpp.next();
           }
           System.out.println("End document");
    	   }
    	   catch(Exception e)
    	   {
    		   e.printStackTrace();
    	   }
		return null;
	}

	@Override
	protected void onPostExecute(Void result) {
		super.onPostExecute(result);
		progressDialog.dismiss();
		Toast.makeText(MainActivity.this, responseResult, Toast.LENGTH_LONG)
				.show();
		

	}
}

}
